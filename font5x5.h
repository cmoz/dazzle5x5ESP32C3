#ifndef FONT5X5_H
#define FONT5X5_H

#include <Arduino.h>

// 5x5 pixel font for uppercase letters A-Z (indexes 0-25) 
const uint8_t letters[][5][5] = {
  // A
  {{0,1,1,1,0},
   {1,0,0,0,1},
   {1,1,1,1,1},
   {1,0,0,0,1}},
   {1,0,0,0,1},
  // B
  {{1,1,1,1,0},
   {1,0,0,0,1},
   {1,1,1,1,0},
   {1,0,0,0,1},
   {1,1,1,1,0}},
  // C
  {{0,1,1,1,1},
   {1,0,0,0,0},
   {1,0,0,0,0},
   {1,0,0,0,0},
   {0,1,1,1,1}},
  // D
  {{1,1,1,0,0},
   {1,0,0,1,0},
   {1,0,0,0,1},
   {1,0,0,1,0},
   {1,1,1,0,0}},
  // E
  {{1,1,1,1,1},
   {1,0,0,0,0},
   {1,1,1,1,0},
   {1,0,0,0,0},
   {1,1,1,1,1}},
  // F
  {{1,1,1,1,1},
   {1,0,0,0,0},
   {1,1,1,1,0},
   {1,0,0,0,0},
   {1,0,0,0,0}},
  // G
  {{0,1,1,1,1},
   {1,0,0,0,0},
   {1,0,1,1,1},
   {1,0,0,0,1},
   {0,1,1,1,1}},
  // H
  {{1,0,0,0,1},
   {1,0,0,0,1},
   {1,1,1,1,1},
   {1,0,0,0,1},
   {1,0,0,0,1}},
  // I
  {{0,1,1,1,0},
   {0,0,1,0,0},
   {0,0,1,0,0},
   {0,0,1,0,0},
   {0,1,1,1,0}},
  // J
  {{0,0,0,0,1},
   {0,0,0,0,1},
   {0,0,0,0,1},
   {1,0,0,0,1},
   {0,1,1,1,0}},
  // K
  {{1,0,0,0,1},
   {1,0,0,1,0},
   {1,1,1,0,0},
   {1,0,0,1,0},
   {1,0,0,0,1}},
  // L
  {{1,0,0,0,0},
   {1,0,0,0,0},
   {1,0,0,0,0},
   {1,0,0,0,0},
   {1,1,1,1,1}},
  // M
  {{1,0,0,0,1},
   {1,1,0,1,1},
   {1,0,1,0,1},
   {1,0,0,0,1},
   {1,0,0,0,1}},
  // N
  {{1,0,0,0,1},
   {1,1,0,0,1},
   {1,0,1,0,1},
   {1,0,0,1,1},
   {1,0,0,0,1}},
  // O
  {{0,1,1,1,0},
   {1,0,0,0,1},
   {1,0,0,0,1},
   {1,0,0,0,1},
   {0,1,1,1,0}},
  // P
  {{1,1,1,1,0},
   {1,0,0,0,1},
   {1,1,1,1,0},
   {1,0,0,0,0},
   {1,0,0,0,0}},
  // Q
  {{0,1,1,1,0},
   {1,0,0,0,1},
   {1,0,0,1,1},
   {1,0,0,0,1},
   {0,1,1,1,1}},
  // R
  {{1,1,1,1,0},
   {1,0,0,0,1},
   {1,1,1,1,0},
   {1,0,1,0,0},
   {1,0,0,1,0}},
  // S
  {{0,1,1,1,1},
   {1,0,0,0,0},
   {0,1,1,1,0},
   {0,0,0,0,1},
   {1,1,1,1,0}},
  // T
  {{1,1,1,1,1},
   {0,0,1,0,0},
   {0,0,1,0,0},
   {0,0,1,0,0},
   {0,0,1,0,0}},
  // U
  {{1,0,0,0,1},
   {1,0,0,0,1},
   {1,0,0,0,1},
   {1,0,0,0,1},
   {0,1,1,1,0}},
  // V
  {{1,0,0,0,1},
   {1,0,0,0,1},
   {0,1,0,1,0},
   {0,1,0,1,0},
   {0,0,1,0,0}},
  // W
  {{1,0,0,0,1},
   {1,0,0,0,1},
   {1,0,1,0,1},
   {1,1,0,1,1},
   {1,0,0,0,1}},
  // X
  {{1,0,0,0,1},
   {0,1,0,1,0},
   {0,0,1,0,0},
   {0,1,0,1,0},
   {1,0,0,0,1}},
  // Y
  {{1,0,0,0,1},
   {0,1,0,1,0},
   {0,0,1,0,0},
   {0,0,1,0,0},
   {0,0,1,0,0}},
  // Z
  {{1,1,1,1,1},
   {0,0,0,1,0},
   {0,0,1,0,0},
   {0,1,0,0,0},
   {1,1,1,1,1}},

  // Digits 0-9 (indexes 26-35)
  // 0
  {{0,1,1,1,0},
   {1,0,0,0,1},
   {1,0,0,1,1},
   {1,0,1,0,1},
   {0,1,1,1,0}},
  // 1
  {{0,0,1,0,0},
   {0,1,1,0,0},
   {1,0,1,0,0},
   {0,0,1,0,0},
   {1,1,1,1,1}},
  // 2
  {{1,1,1,1,0},
   {0,0,0,0,1},
   {0,1,1,1,0},
   {1,0,0,0,0},
   {1,1,1,1,1}},
  // 3
  {{1,1,1,1,0},
   {0,0,0,0,1},
   {0,1,1,1,0},
   {0,0,0,0,1},
   {1,1,1,1,0}},
  // 4
  {{1,0,0,1,0},
   {1,0,0,1,0},
   {1,1,1,1,1},
   {0,0,0,1,0},
   {0,0,0,1,0}},
  // 5
  {{1,1,1,1,1},
   {1,0,0,0,0},
   {1,1,1,1,0},
   {0,0,0,0,1},
   {1,1,1,1,0}},
  // 6
  {{0,1,1,1,0},
   {1,0,0,0,0},
   {1,1,1,1,0},
   {1,0,0,0,1},
   {0,1,1,1,0}},
  // 7
  {{1,1,1,1,1},
   {0,0,0,1,0},
   {0,0,1,0,0},
   {0,1,0,0,0},
   {1,0,0,0,0}},
  // 8
  {{0,1,1,1,0},
   {1,0,0,0,1},
   {0,1,1,1,0},
   {1,0,0,0,1},
   {0,1,1,1,0}},
  // 9
  {{0,1,1,1,0},
   {1,0,0,0,1},
   {0,1,1,1,1},
   {0,0,0,0,1},
   {0,1,1,1,0}},

  // Space (index 36)
  {{0,0,0,0,0},
   {0,0,0,0,0},
   {0,0,0,0,0},
   {0,0,0,0,0},
   {0,0,0,0,0}},

  // Full stop (index 37)
  {{0,0,0,0,0},
   {0,0,0,0,0},
   {0,0,0,0,0},
   {0,0,0,0,0},
   {1,0,0,0,0}},

  // ! (index 38)
  {{0,0,1,0,0},
   {0,0,1,0,0},
   {0,0,1,0,0},
   {0,0,0,0,0},
   {0,0,1,0,0}},

  // - (index 39)
  {{0,0,0,0,0},
   {0,0,0,0,0},
   {1,1,1,1,1},
   {0,0,0,0,0},
   {0,0,0,0,0}},

  // solid colour (index 40)
  {{1,1,1,1,1},
   {1,1,1,1,1},
   {1,1,1,1,1},
   {0,0,0,0,0},
   {0,0,0,0,0}},
};

int getLetterIndex(char c) {
  if (c >= 'A' && c <= 'Z') {
    return c - 'A';  // 0-25
  }
  if (c >= '0' && c <= '9') {
    return 26 + (c - '0');  // 26-35
  }
  if (c == ' ') {
    return 36;
  }
  // Add punctuation handling if needed
  if (c == '.') {
    return 37;
  }
  if (c == '!') {
    return 38;
  }
    if (c == '-') {
    return 39;
  }
  return 36;  // Default to space for unknown chars
}

#endif
